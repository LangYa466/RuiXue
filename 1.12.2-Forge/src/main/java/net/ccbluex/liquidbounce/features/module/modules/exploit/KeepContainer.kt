/*
 * LiquidBounce Base
 * God SkidBounce
 * Conding
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.api.minecraft.client.gui.inventory.IGuiContainer
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.KeyEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.ScreenEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.value.TextValue
import org.lwjgl.input.Keyboard

@ModuleInfo(name = "KeepContainer", description =  "允许你随处打开一个曾关闭的物品栏",category = ModuleCategory.EXPLOIT)
class KeepContainer : Module() {
    private var container: IGuiContainer? = null
    private val ContainerBind = TextValue("ContainerBind","N")
    private val ChestBind = TextValue("ChestBind","M")

    override fun onDisable() {
        if (container != null)
            mc.netHandler.addToSendQueue(classProvider.createCPacketCloseWindow(container!!.inventorySlots!!.windowId))

        container = null
    }

    @EventTarget
    fun onGui(event: ScreenEvent) {
        val guiScreen = event.guiScreen

        if (classProvider.isGuiContainer(guiScreen) && !classProvider.isGuiInventory(guiScreen))
            container = guiScreen!!.asGuiContainer()
        if (classProvider.isGuiChest(guiScreen) && !classProvider.isGuiInventory(guiScreen))
            container = guiScreen!!.asGuiContainer()
    }

    @EventTarget
    fun onKey(event: KeyEvent) {
        if (event.key == Keyboard.getKeyIndex(ChestBind.get())) {
            if (container == null)
                return

            mc.displayGuiScreen(container)
        }
        if (event.key == Keyboard.getKeyIndex(ContainerBind.get())) {
            if (container == null)
                return

            mc.displayGuiScreen(container)
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (classProvider.isCPacketCloseWindow(event.packet))
            event.cancelEvent()
        else if (classProvider.isSPacketCloseWindow(event.packet)) {
            val packetCloseWindow = event.packet.asSPacketCloseWindow()

            if (container != null && container!!.inventorySlots != null && packetCloseWindow.windowId == container!!.inventorySlots!!.windowId)
                container = null
        }
    }
}